 <script>
    function showTab(tabName) {
      document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
      document.getElementById(tabName).classList.add('active');
    }

    function createProcessTable() {
      const num = parseInt(document.getElementById("numProcesses").value);
      const tbody = document.querySelector("#processTable tbody");
      tbody.innerHTML = "";
      for (let i = 0; i < num; i++) {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td><input type="text" value="P${i + 1}"></td>
          <td><input type="number"></td>
          <td><input type="number"></td>
          <td><input type="number"></td>
        `;
        tbody.appendChild(row);
      }
    }

    function parseInput() {
      const rows = document.querySelectorAll("#processTable tbody tr");
      return Array.from(rows).map(row => {
        const cells = row.querySelectorAll("input");
        return {
          pid: cells[0].value,
          arrival: parseInt(cells[1].value),
          burst: parseInt(cells[2].value),
          priority: parseInt(cells[3].value) || 0
        };
      });
    }

    function displayResults(processes, ganttChart) {
      const gantt = document.getElementById("gantt");
      gantt.innerHTML = "";
      ganttChart.forEach(block => {
        const div = document.createElement("div");
        div.className = "gantt-block";
        div.innerText = `${block.pid}\n(${block.time})`;
        gantt.appendChild(div);
      });

      let output = `<table><tr><th>PID</th><th>Arrival</th><th>Burst</th><th>Completion</th><th>TAT</th><th>WT</th></tr>`;
      let totalTAT = 0, totalWT = 0;
      processes.forEach(p => {
        output += `<tr><td>${p.pid}</td><td>${p.arrival}</td><td>${p.burst}</td><td>${p.completion}</td><td>${p.turnaround}</td><td>${p.waiting}</td></tr>`;
        totalTAT += p.turnaround;
        totalWT += p.waiting;
      });
      output += `</table><h3>Average Turnaround Time: ${(totalTAT / processes.length).toFixed(2)}</h3>`;
      output += `<h3>Average Waiting Time: ${(totalWT / processes.length).toFixed(2)}</h3>`;
      document.getElementById("output").innerHTML = output;
    }

    function simulate() {
      const algo = document.getElementById("algorithm").value;
      const quantum = parseInt(document.getElementById("quantum").value);
      const processes = parseInput();
      let result;
      switch (algo) {
        case "FCFS": result = fcfs(processes); break;
        case "SJF": result = sjf(processes, false); break;
        case "SRTF": result = sjf(processes, true); break;
        case "Priority": result = priority(processes, false); break;
        case "PriorityP": result = priority(processes, true); break;
        case "RR": result = rr(processes, quantum); break;
      }
      displayResults(result.processes, result.gantt);
    }

    function fcfs(processes) {
      processes.sort((a, b) => a.arrival - b.arrival);
      let time = 0, gantt = [];
      processes.forEach(p => {
        if (time < p.arrival) time = p.arrival;
        time += p.burst;
        p.completion = time;
        p.turnaround = time - p.arrival;
        p.waiting = p.turnaround - p.burst;
        gantt.push({ pid: p.pid, time });
      });
      return { processes, gantt };
    }

    function sjf(processes, preemptive) {
      let time = 0, completed = 0, n = processes.length;
      let burst = processes.map(p => p.burst), done = Array(n).fill(false), gantt = [];
      while (completed < n) {
        let idx = -1, min = Infinity;
        for (let i = 0; i < n; i++) {
          if (!done[i] && processes[i].arrival <= time && burst[i] < min && burst[i] > 0) {
            min = burst[i]; idx = i;
          }
        }
        if (idx === -1) { time++; continue; }
        if (preemptive) {
          burst[idx]--; gantt.push({ pid: processes[idx].pid, time: time + 1 });
          if (burst[idx] === 0) {
            done[idx] = true; completed++;
            processes[idx].completion = time + 1;
            processes[idx].turnaround = processes[idx].completion - processes[idx].arrival;
            processes[idx].waiting = processes[idx].turnaround - processes[idx].burst;
          }
          time++;
        } else {
          time = Math.max(time, processes[idx].arrival);
          time += burst[idx]; burst[idx] = 0;
          done[idx] = true; completed++;
          processes[idx].completion = time;
          processes[idx].turnaround = time - processes[idx].arrival;
          processes[idx].waiting = processes[idx].turnaround - processes[idx].burst;
          gantt.push({ pid: processes[idx].pid, time });
        }
      }
      return { processes, gantt };
    }

    function priority(processes, preemptive) {
      let time = 0, completed = 0, n = processes.length;
      let burst = processes.map(p => p.burst), done = Array(n).fill(false), gantt = [];
      while (completed < n) {
        let idx = -1, minP = Infinity;
        for (let i = 0; i < n; i++) {
          if (!done[i] && processes[i].arrival <= time && processes[i].priority < minP && burst[i] > 0) {
            minP = processes[i].priority; idx = i;
          }
        }
        if (idx === -1) { time++; continue; }
        if (preemptive) {
          burst[idx]--; gantt.push({ pid: processes[idx].pid, time: time + 1 });
          if (burst[idx] === 0) {
            done[idx] = true; completed++;
            processes[idx].completion = time + 1;
            processes[idx].turnaround = processes[idx].completion - processes[idx].arrival;
            processes[idx].waiting = processes[idx].turnaround - processes[idx].burst;
          }
          time++;
        } else {
          time = Math.max(time, processes[idx].arrival);
          time += burst[idx]; burst[idx] = 0;
          done[idx] = true; completed++;
          processes[idx].completion = time;
          processes[idx].turnaround = time - processes[idx].arrival;
          processes[idx].waiting = processes[idx].turnaround - processes[idx].burst;
          gantt.push({ pid: processes[idx].pid, time });
        }
      }
      return { processes, gantt };
    }

    function rr(processes, quantum) {
      let time = 0, queue = [], gantt = [], n = processes.length;
      let burst = processes.map(p => p.burst), arrived = Array(n).fill(false);
      while (true) {
        processes.forEach((p, i) => {
          if (p.arrival <= time && !arrived[i]) { queue.push(i); arrived[i] = true; }
        });
        if (queue.length === 0) {
          if (arrived.every(Boolean)) break;
          time++; continue;
        }
        let idx = queue.shift();
        let exec = Math.min(quantum, burst[idx]);
        gantt.push({ pid: processes[idx].pid, time: time + exec });
        time += exec;
        burst[idx] -= exec;
        processes.forEach((p, i) => {
          if (p.arrival <= time && !arrived[i]) { queue.push(i); arrived[i] = true; }
        });
        if (burst[idx] > 0) queue.push(idx);
        else {
          processes[idx].completion = time;
          processes[idx].turnaround = time - processes[idx].arrival;
          processes[idx].waiting = processes[idx].turnaround - processes[idx].burst;
        }
      }
      return { processes, gantt };
    }
  </script>
</body>
</html>
